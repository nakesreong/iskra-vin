# interfaces/telegram_bot.py

import logging
import os
import sys
import yaml
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ app.core_engine ---
current_dir_bot = os.path.dirname(os.path.abspath(__file__))
project_root_bot = os.path.dirname(current_dir_bot)
if project_root_bot not in sys.path:
    sys.path.insert(0, project_root_bot)
# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π ---

try:
    from app.core_engine import CoreEngine
except ModuleNotFoundError:
    print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CoreEngine.")
    print(f"–¢–µ–∫—É—â–∏–π sys.path: {sys.path}")
    sys.exit(1)
except Exception as import_err:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ CoreEngine: {import_err}")
    sys.exit(1)

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
TELEGRAM_TOKEN = None
ALLOWED_USER_IDS = [] # <--- –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID

try:
    config_path_bot = os.path.join(project_root_bot, 'configs', 'settings.yaml')
    with open(config_path_bot, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    TELEGRAM_TOKEN = config.get('telegram_bot', {}).get('token')
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN": # <--- –£—Å–∏–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        raise ValueError("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º –≤ configs/settings.yaml")
    print("Telegram_Bot: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID <--- –î–û–ë–ê–í–õ–ï–ù–û
    ALLOWED_USER_IDS = config.get('telegram_bot', {}).get('allowed_user_ids', [])
    if not ALLOWED_USER_IDS:
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID (allowed_user_ids) –≤ configs/settings.yaml –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º.")
    else:
        print(f"Telegram_Bot: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID –∑–∞–≥—Ä—É–∂–µ–Ω: {ALLOWED_USER_IDS}")

except Exception as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    sys.exit(1)
# --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

CORE_ENGINE_INSTANCE = None
try:
    CORE_ENGINE_INSTANCE = CoreEngine()
    if not CORE_ENGINE_INSTANCE.config_data:
        logger.error("Telegram_Bot: CoreEngine –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NLU –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CoreEngine: {e}")
    print("Telegram_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å CoreEngine. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    sys.exit(1)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS: # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ ID
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (start) –æ—Ç User ID: {user_id}")
        return

    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø <b>–ù–æ–∫—Å</b>, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ —Å–ª—É–∂–∏—Ç—å!", # –ó–∞–º–µ–Ω–∏–ª –û–±—Å–∏–¥–∏–∞–Ω –Ω–∞ –ù–æ–∫—Å
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS: # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ ID
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (help) –æ—Ç User ID: {user_id}")
        return

    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–µ –ø–æ–Ω—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç' –∏–ª–∏ '–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ'."
    )

# –í interfaces/telegram_bot.py

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_name = update.effective_user.first_name

    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏, {user_name}, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç User ID: {user_id} ({user_name}) —Å —Ç–µ–∫—Å—Ç–æ–º: '{update.message.text}'")
        return

    user_text = update.message.text
    logger.info(f"Telegram_Bot: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): '{user_text}'")

    if not CORE_ENGINE_INSTANCE:
        response_to_user = "–ò–∑–≤–∏–Ω–∏, –º–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–≤–∏–∂–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏."
        logger.error("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.")
        await update.message.reply_text(response_to_user)
        return

    engine_response_dict = CORE_ENGINE_INSTANCE.process_user_command(user_text)
    logger.info(f"Telegram_Bot: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CoreEngine –¥–ª—è {user_name}: {engine_response_dict}")

    response_to_user = engine_response_dict.get("final_response_for_user") # –ü—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ

    if response_to_user: # <--- –ù–ê–®–ê –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å.
        await update.message.reply_text(response_to_user)
    else:
        logger.info(f"Telegram_Bot: –î–ª—è –∫–æ–º–∞–Ω–¥—ã '{user_text}' –æ—Ç {user_name} –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ NLU –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç).")

def run_bot() -> None:
    if not TELEGRAM_TOKEN:
        logger.critical("Telegram_Bot: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    if not CORE_ENGINE_INSTANCE:
        logger.critical("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build() # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    logger.info("–ù–æ–∫—Å (Telegram –ë–æ—Ç) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –ò—Å–∫—Ä–∞!") # –ó–∞–º–µ–Ω–∏–ª –û–±—Å–∏–¥–∏–∞–Ω –Ω–∞ –ù–æ–∫—Å
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram-–±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    logger.info("–ù–æ–∫—Å (Telegram –ë–æ—Ç) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.") # –ó–∞–º–µ–Ω–∏–ª –û–±—Å–∏–¥–∏–∞–Ω –Ω–∞ –ù–æ–∫—Å

if __name__ == "__main__":
    run_bot()