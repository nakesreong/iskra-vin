# interfaces/telegram_bot.py

import logging
import os
import sys
import yaml
import json
import uuid # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
from pathlib import Path # –î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ app.core_engine ---
current_dir_bot = os.path.dirname(os.path.abspath(__file__))
project_root_bot = os.path.dirname(current_dir_bot)
if project_root_bot not in sys.path:
    sys.path.insert(0, project_root_bot)
# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π ---

try:
    from app.core_engine import CoreEngine
    from app.stt_engine import transcribe_audio_to_text # <--- –ù–ê–® STT –î–í–ò–ñ–û–ö
except ModuleNotFoundError as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}.")
    print(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ app/core_engine.py –∏ app/stt_engine.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã.")
    print(f"–¢–µ–∫—É—â–∏–π sys.path: {sys.path}")
    sys.exit(1)
except Exception as import_err:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª–µ–π: {import_err}")
    sys.exit(1)

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
# from telegram.constants import ParseMode # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

# --- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ ---
TEMP_AUDIO_DIR = os.path.join(project_root_bot, "temp_audio")
try:
    Path(TEMP_AUDIO_DIR).mkdir(parents=True, exist_ok=True) # –°–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    print(f"Telegram_Bot: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞—É–¥–∏–æ: {TEMP_AUDIO_DIR}")
except Exception as e_mkdir:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {TEMP_AUDIO_DIR}: {e_mkdir}")
    sys.exit(1)
# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
TELEGRAM_TOKEN = None
ALLOWED_USER_IDS = []

try:
    config_path_bot = os.path.join(project_root_bot, 'configs', 'settings.yaml')
    with open(config_path_bot, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    TELEGRAM_TOKEN = config.get('telegram_bot', {}).get('token')
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        raise ValueError("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º –≤ configs/settings.yaml")
    
    ALLOWED_USER_IDS = config.get('telegram_bot', {}).get('allowed_user_ids', [])
    if not ALLOWED_USER_IDS:
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID (allowed_user_ids) –≤ configs/settings.yaml –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º.")
    else:
        print(f"Telegram_Bot: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID –∑–∞–≥—Ä—É–∂–µ–Ω: {ALLOWED_USER_IDS}")
        
    print("Telegram_Bot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

except Exception as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    sys.exit(1)
# --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º –º–Ω–æ–≥–æ—Å–ª–æ–≤–∏–µ –æ—Ç telegram.ext
logger = logging.getLogger(__name__)
# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CoreEngine ---
CORE_ENGINE_INSTANCE = None
try:
    CORE_ENGINE_INSTANCE = CoreEngine()
    if not CORE_ENGINE_INSTANCE.config_data: 
        logger.error("Telegram_Bot: CoreEngine –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NLU –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∞—Ç—Ä–∏–±—É—Ç config_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None).")
        # –†–µ—à–∞–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –ø–∞–¥–∞—Ç—å. –î–ª—è –Ω–∞—á–∞–ª–∞, –ø—É—Å—Ç—å –ø–æ–ø—Ä–æ–±—É–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, CoreEngine —Å–∞–º –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É.
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CoreEngine: {e}")
    print("Telegram_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å CoreEngine. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    sys.exit(1)
# --- –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CoreEngine ---


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (start) –æ—Ç User ID: {user_id}")
        return
        
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø <b>–ù–æ–∫—Å</b>, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ —Å–ª—É–∂–∏—Ç—å!",
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (help) –æ—Ç User ID: {user_id}")
        return

    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–µ –ø–æ–Ω—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç' –∏–ª–∏ '–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ'."
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_name = update.effective_user.first_name

    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏, {user_name}, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (text) –æ—Ç User ID: {user_id} ({user_name}) —Å —Ç–µ–∫—Å—Ç–æ–º: '{update.message.text}'")
        return

    user_text = update.message.text
    logger.info(f"Telegram_Bot: –ü–æ–ª—É—á–µ–Ω–æ –¢–ï–ö–°–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): '{user_text}'")

    if not CORE_ENGINE_INSTANCE or not CORE_ENGINE_INSTANCE.config_data: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É config_data
        response_to_user = "–ò–∑–≤–∏–Ω–∏, –º–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–≤–∏–∂–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏."
        logger.error("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await update.message.reply_text(response_to_user)
        return

    engine_response_dict = CORE_ENGINE_INSTANCE.process_user_command(user_text)
    logger.info(f"Telegram_Bot: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CoreEngine –¥–ª—è {user_name} (—Ç–µ–∫—Å—Ç): {engine_response_dict}")

    response_to_user = engine_response_dict.get("final_response_for_user")
    
    if response_to_user: 
        await update.message.reply_text(response_to_user)
    else:
        logger.info(f"Telegram_Bot: –î–ª—è –∫–æ–º–∞–Ω–¥—ã '{user_text}' –æ—Ç {user_name} –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞).")

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_name = update.effective_user.first_name

    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏, {user_name}, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (voice) –æ—Ç User ID: {user_id} ({user_name})")
        return

    logger.info(f"Telegram_Bot: –ü–æ–ª—É—á–µ–Ω–æ –ì–û–õ–û–°–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})")
    
    voice = update.message.voice
    if not voice:
        logger.warning("Telegram_Bot: –û–±—ä–µ–∫—Ç Voice –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    file_id = voice.file_id
    ogg_file = None # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ finally
    downloaded_file_path = None # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å

    try:
        await update.message.reply_text("–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ò—Å–∫—Ä–∞! –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å...")
        
        ogg_file = await context.bot.get_file(file_id)
        
        unique_filename = f"{user_id}_{uuid.uuid4()}.ogg"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        downloaded_file_path_obj = Path(TEMP_AUDIO_DIR) / unique_filename 
        
        await ogg_file.download_to_drive(custom_path=downloaded_file_path_obj)
        downloaded_file_path = str(downloaded_file_path_obj) # pathlib.Path –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è stt_engine
        logger.info(f"Telegram_Bot: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {downloaded_file_path}")

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ STT Engine
        recognized_text = transcribe_audio_to_text(downloaded_file_path)

        if recognized_text:
            logger.info(f"Telegram_Bot: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–∞: '{recognized_text}'")
            await update.message.reply_text(f"–Ø —Ä–∞—Å—Å–ª—ã—à–∞–ª: \"{recognized_text}\" \n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...")

            if not CORE_ENGINE_INSTANCE or not CORE_ENGINE_INSTANCE.config_data: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É config_data
                response_to_user = "–ò–∑–≤–∏–Ω–∏, –º–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–≤–∏–∂–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
                logger.error("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                await update.message.reply_text(response_to_user)
                return

            engine_response_dict = CORE_ENGINE_INSTANCE.process_user_command(recognized_text)
            logger.info(f"Telegram_Bot: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CoreEngine –¥–ª—è {user_name} (–≥–æ–ª–æ—Å -> —Ç–µ–∫—Å—Ç '{recognized_text}'): {engine_response_dict}")

            response_to_user = engine_response_dict.get("final_response_for_user")
            
            if response_to_user:
                await update.message.reply_text(response_to_user)
            else:
                logger.info(f"Telegram_Bot: –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã '{recognized_text}' –æ—Ç {user_name} –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            logger.warning(f"Telegram_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name}.")
            await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏, –ò—Å–∫—Ä–∞, —è –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑, –∏–ª–∏ —Å–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç–æ–º?")

    except Exception as e:
        logger.error(f"Telegram_Bot: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –ø—É—Ç—å –∫ –Ω–µ–º—É –∏–∑–≤–µ—Å—Ç–µ–Ω
        if downloaded_file_path and os.path.exists(downloaded_file_path):
            try:
                os.remove(downloaded_file_path)
                logger.info(f"Telegram_Bot: –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª {downloaded_file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e_del:
                logger.error(f"Telegram_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª {downloaded_file_path}: {e_del}")
# --- –ö–æ–Ω–µ—Ü –ù–û–í–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ---

def run_bot() -> None:
    if not TELEGRAM_TOKEN:
        logger.critical("Telegram_Bot: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    if not CORE_ENGINE_INSTANCE or not CORE_ENGINE_INSTANCE.config_data: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É config_data
        logger.critical("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message)) # <--- –î–û–ë–ê–í–õ–ï–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–ê

    logger.info("–ù–æ–∫—Å (Telegram –ë–æ—Ç) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å), –ò—Å–∫—Ä–∞!")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram-–±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        
    logger.info("–ù–æ–∫—Å (Telegram –ë–æ—Ç) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    run_bot()
