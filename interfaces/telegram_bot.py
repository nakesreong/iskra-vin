"""Telegram bot interface for the CoreEngine.

This module exposes :func:`run_bot` which starts a Telegram bot capable of
processing text and voice commands. Incoming messages are passed to the
``CoreEngine`` and responses are sent back to the user.
"""

from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update
import logging
import os
import sys
import yaml
import json
import uuid
from pathlib import Path

# Add project root so internal modules are importable
current_dir_bot = os.path.dirname(os.path.abspath(__file__))
project_root_bot = os.path.dirname(current_dir_bot)
if project_root_bot not in sys.path:
    sys.path.insert(0, project_root_bot)

try:
    from app.core_engine import CoreEngine
    from app.stt_engine import transcribe_audio_to_text
except ModuleNotFoundError as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}.")
    print(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ app/core_engine.py –∏ app/stt_engine.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã.")
    print(f"–¢–µ–∫—É—â–∏–π sys.path: {sys.path}")
    sys.exit(1)
except Exception as import_err:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª–µ–π: {import_err}")
    sys.exit(1)


# Directory for temporary audio files
TEMP_AUDIO_DIR = os.path.join(project_root_bot, "temp_audio")
try:
    Path(TEMP_AUDIO_DIR).mkdir(parents=True, exist_ok=True)
    print(f"Telegram_Bot: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞—É–¥–∏–æ: {TEMP_AUDIO_DIR}")
except Exception as e_mkdir:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {TEMP_AUDIO_DIR}: {e_mkdir}")
    sys.exit(1)

# Load configuration
TELEGRAM_TOKEN = None
ALLOWED_USER_IDS = []

try:
    config_path_bot = os.path.join(project_root_bot, "configs", "settings.yaml")
    with open(config_path_bot, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    TELEGRAM_TOKEN = config.get("telegram_bot", {}).get("token")
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        raise ValueError("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º –≤ configs/settings.yaml")

    ALLOWED_USER_IDS = config.get("telegram_bot", {}).get("allowed_user_ids", [])
    if not ALLOWED_USER_IDS:
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID (allowed_user_ids) –≤ configs/settings.yaml –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º.")
    else:
        print(f"Telegram_Bot: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID –∑–∞–≥—Ä—É–∂–µ–Ω: {ALLOWED_USER_IDS}")

    print("Telegram_Bot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

except Exception as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    sys.exit(1)

# Configure logging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# Initialize CoreEngine
CORE_ENGINE_INSTANCE = None
try:
    CORE_ENGINE_INSTANCE = CoreEngine()
    if not CORE_ENGINE_INSTANCE.config_data:
        logger.error("Telegram_Bot: CoreEngine –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NLU –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CoreEngine: {e}")
    print("Telegram_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å CoreEngine. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    sys.exit(1)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (start) –æ—Ç User ID: {user_id}")
        return

    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø <b>–ù–æ–∫—Å</b>, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ —Å–ª—É–∂–∏—Ç—å!",
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (help) –æ—Ç User ID: {user_id}")
        return

    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–µ –ø–æ–Ω—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç' –∏–ª–∏ '–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ'."
    )


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_name = update.effective_user.first_name

    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏, {user_name}, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (text) –æ—Ç User ID: {user_id} ({user_name}) —Å —Ç–µ–∫—Å—Ç–æ–º: '{update.message.text}'")
        return

    user_text = update.message.text
    logger.info(f"Telegram_Bot: –ü–æ–ª—É—á–µ–Ω–æ –¢–ï–ö–°–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): '{user_text}'")

    if not CORE_ENGINE_INSTANCE or not CORE_ENGINE_INSTANCE.config_data:
        response_to_user = "–ò–∑–≤–∏–Ω–∏, –º–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–≤–∏–∂–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏."
        logger.error("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await update.message.reply_text(response_to_user)
        return

    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ is_voice_command = False
    engine_response_dict = CORE_ENGINE_INSTANCE.process_user_command(user_text, is_voice_command=False)
    logger.info(f"Telegram_Bot: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CoreEngine –¥–ª—è {user_name} (—Ç–µ–∫—Å—Ç): {engine_response_dict}")

    # –£ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç acknowledgement_response, —Ç–æ–ª—å–∫–æ final_status_response
    response_to_user = engine_response_dict.get("final_status_response")

    if response_to_user:
        await update.message.reply_text(response_to_user)
    else:
        logger.info(f"Telegram_Bot: –î–ª—è –∫–æ–º–∞–Ω–¥—ã '{user_text}' –æ—Ç {user_name} –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞).")


async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_name = update.effective_user.first_name

    if ALLOWED_USER_IDS and user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏, {user_name}, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. üõë")
        logger.warning(f"Telegram_Bot: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (voice) –æ—Ç User ID: {user_id} ({user_name})")
        return

    logger.info(f"Telegram_Bot: –ü–æ–ª—É—á–µ–Ω–æ –ì–û–õ–û–°–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})")

    voice = update.message.voice
    if not voice:
        logger.warning("Telegram_Bot: –û–±—ä–µ–∫—Ç Voice –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    file_id = voice.file_id
    ogg_file = None
    downloaded_file_path = None

    try:
        ogg_file = await context.bot.get_file(file_id)
        unique_filename = f"{user_id}_{uuid.uuid4()}.ogg"
        downloaded_file_path_obj = Path(TEMP_AUDIO_DIR) / unique_filename
        await ogg_file.download_to_drive(custom_path=downloaded_file_path_obj)
        downloaded_file_path = str(downloaded_file_path_obj)
        logger.info(f"Telegram_Bot: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {downloaded_file_path}")

        recognized_text = transcribe_audio_to_text(downloaded_file_path)

        if recognized_text:
            logger.info(f"Telegram_Bot: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–∞: '{recognized_text}'")

            if not CORE_ENGINE_INSTANCE or not CORE_ENGINE_INSTANCE.config_data:
                response_to_user = "–ò–∑–≤–∏–Ω–∏, –º–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–≤–∏–∂–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
                logger.error("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                await update.message.reply_text(response_to_user)
                return

            # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ CoreEngine, —É–∫–∞–∑—ã–≤–∞—è, —á—Ç–æ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
            engine_response_dict = CORE_ENGINE_INSTANCE.process_user_command(recognized_text, is_voice_command=True)
            logger.info(f"Telegram_Bot: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CoreEngine –¥–ª—è {user_name} (–≥–æ–ª–æ—Å -> —Ç–µ–∫—Å—Ç '{recognized_text}'): {engine_response_dict}")

            # Send acknowledgement and final status separately
            acknowledgement = engine_response_dict.get("acknowledgement_response")
            final_status = engine_response_dict.get("final_status_response")

            if acknowledgement:  # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                await update.message.reply_text(acknowledgement)

            if final_status:  # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç/–æ—à–∏–±–∫—É
                await update.message.reply_text(final_status)
            elif not acknowledgement:  # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                logger.info(f"Telegram_Bot: –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã '{recognized_text}' –æ—Ç {user_name} –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

        else:  # –ï—Å–ª–∏ STT –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç
            logger.warning(f"Telegram_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name}.")
            await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏, –ò—Å–∫—Ä–∞, —è –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑, –∏–ª–∏ —Å–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç–æ–º?")

    except Exception as e:
        logger.error(f"Telegram_Bot: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        if downloaded_file_path and os.path.exists(downloaded_file_path):
            try:
                os.remove(downloaded_file_path)
                logger.info(f"Telegram_Bot: –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª {downloaded_file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e_del:
                logger.error(f"Telegram_Bot: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª {downloaded_file_path}: {e_del}")


def run_bot() -> None:
    if not TELEGRAM_TOKEN:
        logger.critical("Telegram_Bot: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    if not CORE_ENGINE_INSTANCE or not CORE_ENGINE_INSTANCE.config_data:
        logger.critical("Telegram_Bot: CoreEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))

    logger.info("–ù–æ–∫—Å (Telegram –ë–æ—Ç) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å), –ò—Å–∫—Ä–∞!")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram-–±–æ—Ç–∞: {e}")
        import traceback

        traceback.print_exc()

    logger.info("–ù–æ–∫—Å (Telegram –ë–æ—Ç) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    run_bot()

